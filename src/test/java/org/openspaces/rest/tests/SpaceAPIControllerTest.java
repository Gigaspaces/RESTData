/*
package org.openspaces.rest.tests;
import java.io.BufferedReader;
import java.io.StringReader;
import java.net.InetAddress;
import java.util.*;

import com.gigaspaces.annotation.pojo.FifoSupport;
import com.gigaspaces.metadata.SpaceDocumentSupport;
import com.gigaspaces.metadata.StorageType;
import com.gigaspaces.metadata.index.SpaceIndexType;
import junit.framework.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openspaces.admin.Admin;
import org.openspaces.admin.AdminFactory;
import org.openspaces.admin.space.Spaces;
import org.openspaces.core.GigaSpace;
import org.openspaces.core.GigaSpaceConfigurer;
import org.openspaces.core.space.UrlSpaceConfigurer;
import org.openspaces.rest.exceptions.ObjectNotFoundException;
import org.openspaces.rest.exceptions.TypeNotFoundException;
import org.openspaces.rest.space.SpaceAPIController;
import org.openspaces.rest.utils.ControllerUtils;
import org.springframework.web.HttpMediaTypeNotAcceptableException;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.servlet.mvc.multiaction.NoSuchRequestHandlingMethodException;

import com.gigaspaces.document.SpaceDocument;
import com.gigaspaces.metadata.SpaceTypeDescriptor;
import com.gigaspaces.metadata.SpaceTypeDescriptorBuilder;
import com.gigaspaces.query.IdQuery;
import com.gigaspaces.query.QueryResultType;

import static org.junit.Assert.*;


public class SpaceAPIControllerTest {

    public static enum Job{WORKER, DOCTOR, FARMER}
    
    private static final String SPACENAME = "embeddedTestSpace";
    private static SpaceAPIController spaceAPIController;
    private static GigaSpace gigaSpace;
    private static String locators;
    private static String groups;
    static {
    	try{
    		locators =InetAddress.getLocalHost().getHostAddress();

        }catch(Exception e){}

        groups = "openspaces-rest";
    }


    @BeforeClass
    public static void beforeClass(){
        spaceAPIController = new SpaceAPIController();
        ControllerUtils.spaceName = SPACENAME;
        ControllerUtils.lookupGroups = groups;
        gigaSpace = new GigaSpaceConfigurer(new UrlSpaceConfigurer("/./" + SPACENAME+"?groups="+groups)).gigaSpace();
        registerProductType(gigaSpace);
    }
    
    @Before
    public void beforeTest(){
        gigaSpace.clear(null);
    }

    @Test
    public void testInroduceType() throws Exception {
        String content = "[{\"CatalogNumber\":\"doc1\", \"Category\":\"Hardware\", \"Name\":\"Anvil1\", \"nested\": {\"nestedVar1\":\"nestedValue1\"}}, {\"CatalogNumber\":\"doc2\", \"Category\":\"Hardware\", \"Name\":\"Anvil2\"}]";
        try {
            Map<String, Object> postResult = spaceAPIController.post("MyType", new BufferedReader(new StringReader(content)));
            fail("Writing to the space without introducing the class should cause TypeNotFoundException and it didn't");
        } catch (TypeNotFoundException e) {
            //This is the right behavior
        }
        Map<String, Object> introduceTypeResult = spaceAPIController.introduceType("MyType", "CatalogNumber");
        assertEquals("success", introduceTypeResult.get("status"));

        try {
            Map<String, Object> postResult = spaceAPIController.post("MyType", new BufferedReader(new StringReader(content)));
            assertEquals("Excpecting to get status equals to success", "success", postResult.get("status"));
            // More tests for write are in testGet()
        } catch (TypeNotFoundException e) {
            fail("Write should not throw TypeNotFoundException after introducing the class");
        }
    }

    @Test
    public void testAdvancedIntroduceType() throws Exception {
        String json = "{\n" +
                "  \"idProperty\": { //required\n" +
                "    \"propertyName\": \"id\",\n" +
                "    \"autoGenerated\": true, // optional\n" +
                "    \"indexType\": \"BASIC\" // optional, use with autoGenerate. SEE com.gigaspaces.metadata.index.SpaceIndexType\n" +
                "  },\n" +
                "  \"routingProperty\": {\n" +
                "    \"propertyName\": \"age\",\n" +
                "    \"indexType\": \"EXTENDED\" // optional. SEE com.gigaspaces.metadata.index.SpaceIndexType\n" +
                "  },\n" +
                "  \"fixedProperties\": [\n" +
                "    {\n" +
                "      \"propertyName\": \"id\",\n" +
                "      \"propertyType\": \"int64\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"propertyName\": \"age\",\n" +
                "      \"propertyType\": \"double\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"propertyName\": \"name\",\n" +
                "      \"propertyType\": \"string\",\n" +
                "      \"documentSupport\": \"COPY\" // optional. SEE com.gigaspaces.metadata.SpaceDocumentSupport\n" +
                "    },\n" +
                "    {\n" +
                "      \"propertyName\": \"address\",\n" +
                "      \"propertyType\": \"string\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"propertyName\": \"prop1\",\n" +
                "      \"propertyType\": \"java.util.Map\",\n" +
                "      \"documentSupport\": \"CONVERT\", // optional. SEE com.gigaspaces.metadata.SpaceDocumentSupport\n" +
                "      \"storageType\": \"OBJECT\" // optional, use with documentSupport. SEE com.gigaspaces.metadata.StorageType\n" +
                "    }\n" +
                "  ],\n" +
                "  \"compoundIndex\": {\n" +
                "    \"paths\": [\n" +
                "      \"prop1\",\n" +
                "      \"address\"\n" +
                "    ],\n" +
                "    \"unique\": true // optional\n" +
                "  },\n" +
                "  \"fifoSupport\": \"DEFAULT\", // SEE com.gigaspaces.annotation.pojo.FifoSupport\n" +
                "  \"blobStoreEnabled\": true,\n" +
                "  \"storageType\": \"OBJECT\", // SEE com.gigaspaces.metadata.StorageType\n" +
                "  \"supportsOptimisticLocking\": true,\n" +
                "  \"supportsDynamicProperties\": false // optional, default to true\n" +
                "}";
        Map<String, Object> result = spaceAPIController.introduceTypeAdvanced("MyAdvancedObject", json);
        assertEquals("success", result.get("status"));

        SpaceTypeDescriptor typeDescriptor = gigaSpace.getTypeManager().getTypeDescriptor("MyAdvancedObject");
        assertEquals("id", typeDescriptor.getIdPropertyName());
        assertEquals(true, typeDescriptor.isAutoGenerateId());
        assertEquals("age", typeDescriptor.getRoutingPropertyName());
        assertEquals(ControllerUtils.javaPrimitives.get("int64"), typeDescriptor.getFixedProperty("id").getType());
        assertEquals(ControllerUtils.javaPrimitives.get("double"), typeDescriptor.getFixedProperty("age").getType());
        assertEquals(ControllerUtils.javaPrimitives.get("string"), typeDescriptor.getFixedProperty("name").getType());
        assertEquals(SpaceDocumentSupport.COPY, typeDescriptor.getFixedProperty("name").getDocumentSupport());
        assertEquals(ControllerUtils.javaPrimitives.get("string"), typeDescriptor.getFixedProperty("address").getType());
        assertEquals(Map.class, typeDescriptor.getFixedProperty("prop1").getType());
        assertEquals(SpaceDocumentSupport.CONVERT, typeDescriptor.getFixedProperty("prop1").getDocumentSupport());
        assertEquals(StorageType.OBJECT, typeDescriptor.getFixedProperty("prop1").getStorageType());
        assertEquals(FifoSupport.DEFAULT, typeDescriptor.getFifoSupport());
        assertEquals(true, typeDescriptor.isBlobstoreEnabled());
        assertEquals(StorageType.OBJECT, typeDescriptor.getStorageType());
        assertEquals(true, typeDescriptor.supportsOptimisticLocking());
        assertEquals(false, typeDescriptor.supportsDynamicProperties());
        assertEquals(SpaceIndexType.BASIC, typeDescriptor.getIndexes().get("id").getIndexType());
        assertEquals(SpaceIndexType.EXTENDED, typeDescriptor.getIndexes().get("age").getIndexType());
    }

    @Test
    public void testGet() throws Exception {
        //write first doc
        Map<String, Object> properties1 = new HashMap<String, Object>();
        properties1.put("CatalogNumber", "doc1");
        properties1.put("Category", "Hardware");
        properties1.put("Name", "Anvil1");
        properties1.put("Price", 9.99d);
        properties1.put("Tags", new String[] {"heavy", "anvil"});
        properties1.put("testvar1", "value1");

        Map<String, Object> nestedProps = new HashMap<String, Object>();
        nestedProps.put("nestedVar1", "nestedValue1");
        properties1.put("nested", nestedProps);
        SpaceDocument document = new SpaceDocument("Product", properties1);
        gigaSpace.write(document);

        //write second doc
        Map<String, Object> properties2 = new HashMap<String, Object>();
        properties2.put("CatalogNumber", "doc2");
        properties2.put("Category", "Hardware");
        properties2.put("Name", "Anvil2");
        properties2.put("Price", 9.99d);
        properties2.put("Tags", new String[] {"heavy", "anvil"});
        properties2.put("testvar2", "value2");

        SpaceDocument document2 = new SpaceDocument("Product", properties2);
        gigaSpace.write(document2);

        //test get by type
        Map<String, Object> result = spaceAPIController.getByQuery("Product", "", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        ArrayList<Map<String, Map<String, Object>>> resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(2, resultData.size());
//        compareObjects(properties1, resultType[0]);
//        compareObjects(properties2, resultType[1]);

        //test get by var1
        result = spaceAPIController.getByQuery("Product", "testvar1='value1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        
        assertEquals(1, resultData.size());
        compareObjects(properties1, resultData.get(0).get("properties"));

        //null size limit
        result = spaceAPIController.getByQuery("Product", "testvar1='value1'", null);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(1, resultData.size());
        compareObjects(properties1, resultData.get(0).get("properties"));

        //1 size limit
        result = spaceAPIController.getByQuery("Product", "testvar1='value1'", 1);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(1, resultData.size());
        compareObjects(properties1, resultData.get(0).get("properties"));

        //test get by var2
        result = spaceAPIController.getByQuery("Product", "testvar2='value2'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(1, resultData.size());
        compareObjects(properties2, resultData.get(0).get("properties"));

        //test nested
        result = spaceAPIController.getByQuery("Product", "nested.nestedVar1='nestedValue1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(1, resultData.size());
        compareObjects(properties1, resultData.get(0).get("properties"));

        //test pojo to document
        Pojo pojo1 = new Pojo();
        pojo1.setId(String.valueOf(1));
        pojo1.setVal("val1");
        gigaSpace.write(pojo1);

        String pojoClassName = Pojo.class.getName();
        result = spaceAPIController.getByQuery(pojoClassName, "id='1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        ArrayList<Map<String, Object>> resultDataPojo = (ArrayList<Map<String, Object>>) result.get("data");
        comparePojoAndProps(pojo1, resultDataPojo.get(0));

        Map<String, Object> resultByID = spaceAPIController.getById(pojoClassName, "1");
        assertEquals("success", resultByID.get("status"));
        Map<String, Object> resultDataById = (Map<String, Object>) resultByID.get("data");
        comparePojoAndProps(pojo1, resultDataById);

        resultByID = spaceAPIController.getById("Product", "doc1");
        assertEquals("success", resultByID.get("status"));
        resultDataById = (Map<String, Object>) resultByID.get("data");
        compareObjects(properties1, (Map<String, Object>) resultDataById.get("properties"));

        Pojo2 pojo2 = new Pojo2();
        pojo2.setId(1);
        pojo2.setVal(123L);
        gigaSpace.write(pojo2);

        resultByID = spaceAPIController.getById(Pojo2.class.getName(), "1");
        assertEquals("success", resultByID.get("status"));
        resultDataById = (Map<String, Object>) resultByID.get("data");
        comparePojoAndProps(pojo2, resultDataById);

        Pojo3 pojo3 = new Pojo3();
        pojo3.setId(1F);
        pojo3.setVal(123L);
        gigaSpace.write(pojo3);

        resultByID = spaceAPIController.getById(Pojo3.class.getName(), "1");
        assertEquals("success", resultByID.get("status"));
        resultDataById = (Map<String, Object>) resultByID.get("data");
        comparePojoAndProps(pojo3, resultDataById);
    }

    @Test
    public void testDelete() throws Exception {
        
        Map<String, Object> properties1 = new HashMap<String, Object>();
        properties1.put("CatalogNumber", "doc1");
        properties1.put("Category", "Hardware");
        properties1.put("Name", "Anvil1");
        SpaceDocument document = new SpaceDocument("Product", properties1);
        gigaSpace.write(document);

        Map<String, Object> properties2 = new HashMap<String, Object>();
        properties2.put("CatalogNumber", "doc2");
        properties2.put("Category", "Hardware");
        properties2.put("Name", "Anvil2");
        Map<String, Object> nestedProps = new HashMap<String, Object>();
        nestedProps.put("nestedVar1", "nestedValue1");
        properties2.put("nested", nestedProps);
        SpaceDocument document2 = new SpaceDocument("Product", properties2);
        gigaSpace.write(document2);

        Map<String, Object> properties3 = new HashMap<String, Object>();
        properties3.put("CatalogNumber", "doc3");
        properties3.put("Category", "Hardware");
        properties3.put("Name", "Anvil3");
        SpaceDocument document3 = new SpaceDocument("Product", properties3);
        gigaSpace.write(document3);

        assertEquals(3, gigaSpace.count(null));

        //test delete by type
        Map<String, Object> result = spaceAPIController.deleteByQuery("Product", "", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        ArrayList<Map<String, Map<String, Object>>> resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        assertEquals(3, resultData.size());

        assertEquals(0, gigaSpace.count(null));
        
        gigaSpace.write(document);
        gigaSpace.write(document2);
        gigaSpace.write(document3);
        
        assertEquals(3, gigaSpace.count(null));
        
        //test simple delete
        result = spaceAPIController.deleteByQuery("Product", "Name='Anvil1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        compareObjects(properties1, resultData.get(0).get("properties"));
        assertEquals(2, gigaSpace.count(null));

        //test nested delete
        result = spaceAPIController.deleteByQuery("Product", "nested.nestedVar1='nestedValue1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        compareObjects(properties2, resultData.get(0).get("properties"));
        assertEquals(1, gigaSpace.count(null));

        //test id-based delete
        Map<String, Object> resultById = spaceAPIController.deleteById("Product", "doc3");
        assertEquals("success", result.get("status"));
        Map<String, Map<String, Object>> resultDataById = (Map<String, Map<String, Object>>) resultById.get("data");
        compareObjects(properties3, resultDataById.get("properties"));
        assertEquals(0, gigaSpace.count(null));

        Pojo pojo1 = new Pojo();
        pojo1.setId(String.valueOf(1));
        pojo1.setVal("val1");
        gigaSpace.write(pojo1);
        assertEquals(1, gigaSpace.count(null));

        //test delete pojo by id
        resultById = spaceAPIController.deleteById(Pojo.class.getName(), "1");
        assertEquals("success", resultById.get("status"));
        Map<String, Object> resultDataByIdPojo = (Map<String, Object>) resultById.get("data");
        comparePojoAndProps(pojo1, resultDataByIdPojo);
        assertEquals(0, gigaSpace.count(null));

        gigaSpace.write(pojo1);

        result = spaceAPIController.deleteByQuery(Pojo.class.getName(), "id='1'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        ArrayList<Map<String, Object>> resultDataPojos = (ArrayList<Map<String, Object>>) result.get("data");
        comparePojoAndProps(pojo1, resultDataPojos.get(0));
        assertEquals(0, gigaSpace.count(null));

        //
        Pojo2 pojo2 = new Pojo2();
        pojo2.setId(1);
        pojo2.setVal(123L);
        gigaSpace.write(pojo2);

        resultById = spaceAPIController.deleteById(Pojo2.class.getName(), "1");
        assertEquals("success", resultById.get("status"));
        assertEquals(0, gigaSpace.count(new Pojo2()));

        Pojo3 pojo3 = new Pojo3();
        pojo3.setId(1F);
        pojo3.setVal(123L);
        gigaSpace.write(pojo3);

        resultById = spaceAPIController.deleteById(Pojo3.class.getName(), "1");
        assertEquals("success", resultById.get("status"));
        assertEquals(0, gigaSpace.count(new Pojo2()));
    }

    @Test
    public void testPost() throws Exception {
        //write first doc
        Map<String, Object> properties1 = new HashMap<String, Object>();
        properties1.put("CatalogNumber", "doc1");
        properties1.put("Category", "Hardware");
        properties1.put("Name", "Anvil1");

        Map<String, Object> nestedProps = new HashMap<String, Object>();
        nestedProps.put("nestedVar1", "nestedValue1");
        properties1.put("nested", nestedProps);

        Map<String, Object> properties2 = new HashMap<String, Object>();
        properties2.put("CatalogNumber", "doc2");
        properties2.put("Category", "Hardware");
        properties2.put("Name", "Anvil2");

        //test writemultiple
        String content = "[{\"CatalogNumber\":\"doc1\", \"Category\":\"Hardware\", \"Name\":\"Anvil1\", \"nested\": {\"nestedVar1\":\"nestedValue1\"}}, {\"CatalogNumber\":\"doc2\", \"Category\":\"Hardware\", \"Name\":\"Anvil2\"}]";

        Map<String, Object> postResult = spaceAPIController.post("Product", new BufferedReader(new StringReader(content)));
        assertEquals("success", postResult.get("status"));

        assertEquals(2, gigaSpace.count(null));

        Map<String, Object> countResult = spaceAPIController.count("Product");
        assertEquals("success", countResult.get("status"));
        assertEquals(2, countResult.get("data"));

        SpaceDocument doc1 = gigaSpace.readById(new IdQuery<SpaceDocument>("Product", "doc1",QueryResultType.DOCUMENT));
        compareObjects(properties1, doc1.getProperties());

        SpaceDocument doc2 = gigaSpace.readById(new IdQuery<SpaceDocument>("Product", "doc2",QueryResultType.DOCUMENT));
        compareObjects(properties2, doc2.getProperties());

        //test update, this should fail since object already exists
        Map<String, Object> properties1copy = new HashMap<String, Object>(properties1);
        Map<String, Object> nestedPropsCopy = new HashMap<String, Object>(nestedProps);
        properties1copy.put("Name", "Anvil1new");
        nestedPropsCopy.put("nestedVar1", "nestedValue1new");
        properties1copy.put("nested", nestedPropsCopy);

        content = "[{\"CatalogNumber\":\"doc1\", \"Category\":\"Hardware\", \"Name\":\"Anvil1new\", \"nested\": {\"nestedVar1\":\"nestedValue1new\"}}, {\"CatalogNumber\":\"doc2\", \"Category\":\"Hardware\", \"Name\":\"Anvil2new\"}]";
        try{
            Map<String, Object> result = spaceAPIController.post("Product", new BufferedReader(new StringReader(content)));
            assertEquals("success", result.get("status"));
        }catch(Exception e){
            fail("An action should not cause an exception but it did");
        }

        assertEquals(2, gigaSpace.count(null));
        doc1 = gigaSpace.readById(new IdQuery<SpaceDocument>("Product", "doc1",QueryResultType.DOCUMENT));
        //compare docs and see that the document before the update operation is the result
        compareObjects(properties1copy, doc1.getProperties());


        //
        Pojo2 pojo2 = new Pojo2();
        gigaSpace.snapshot(pojo2);
        pojo2.setId(1);
        pojo2.setVal(123L);

        content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        Map<String, Object> result = spaceAPIController.post(Pojo2.class.getName(), new BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        SpaceDocument docresult = gigaSpace.readById(new IdQuery<SpaceDocument>(Pojo2.class.getName(), 1,QueryResultType.DOCUMENT));
        comparePojoAndProps(pojo2, docresult.getProperties());

        Pojo3 pojo3 = new Pojo3();
        gigaSpace.snapshot(pojo3);
        pojo3.setId(1F);
        pojo3.setVal(123L);

        content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        result = spaceAPIController.post(Pojo3.class.getName(),new  BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        SpaceDocument docresult2 = gigaSpace.readById(new IdQuery<SpaceDocument>(Pojo3.class.getName(), 1F,QueryResultType.DOCUMENT));
        comparePojoAndProps(pojo3, docresult2.getProperties());
    }

    @Test
    public void testUpdate() throws MissingServletRequestParameterException, HttpMediaTypeNotAcceptableException, NoSuchRequestHandlingMethodException, TypeNotFoundException{
        Map<String, Object> properties1 = new HashMap<String, Object>();
        properties1.put("CatalogNumber", "doc1");
        properties1.put("Category", "Hardware");
        properties1.put("Name", "Anvil1");
        Map<String, Object> nestedProps = new HashMap<String, Object>();
        nestedProps.put("nestedVar1", "nestedValue1");
        properties1.put("nested", nestedProps);

        Map<String, Object> properties2 = new HashMap<String, Object>();
        properties2.put("CatalogNumber", "doc2");
        properties2.put("Category", "Hardware");
        properties2.put("Name", "Anvil2");

        String content = "[{\"CatalogNumber\":\"doc1\", \"Category\":\"Hardware\", \"Name\":\"Anvil1\", \"nested\": {\"nestedVar1\":\"nestedValue1\"}}, {\"CatalogNumber\":\"doc2\", \"Category\":\"Hardware\", \"Name\":\"Anvil2\"}]";

        Map<String, Object> result = spaceAPIController.post("Product", new BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        assertEquals(2, gigaSpace.count(null));

        //test update multiple
        properties1.put("Name", "Anvil1new");
        nestedProps.put("nestedVar1", "nestedValue1new");
        properties1.put("nested", nestedProps);

        properties2.put("Name", "Anvil2new");

        content = "[{\"CatalogNumber\":\"doc1\", \"Category\":\"Hardware\", \"Name\":\"Anvil1new\", \"nested\": {\"nestedVar1\":\"nestedValue1new\"}}, {\"CatalogNumber\":\"doc2\", \"Category\":\"Hardware\", \"Name\":\"Anvil2new\"}]";
        result = spaceAPIController.post("Product", new BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        assertEquals(2, gigaSpace.count(null));
        SpaceDocument doc1 = gigaSpace.readById(new IdQuery<SpaceDocument>("Product", "doc1",QueryResultType.DOCUMENT));
        compareObjects(properties1, doc1.getProperties());

        SpaceDocument doc2 = gigaSpace.readById(new IdQuery<SpaceDocument>("Product", "doc2",QueryResultType.DOCUMENT));
        compareObjects(properties2, doc2.getProperties());

        //
        Pojo2 pojo2 = new Pojo2();
        gigaSpace.snapshot(pojo2);
        pojo2.setId(1);
        pojo2.setVal(123L);

        content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        result = spaceAPIController.post(Pojo2.class.getName(), new BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        SpaceDocument docresult = gigaSpace.readById(new IdQuery<SpaceDocument>(Pojo2.class.getName(), 1,QueryResultType.DOCUMENT));
        comparePojoAndProps(pojo2, docresult.getProperties());

        Pojo3 pojo3 = new Pojo3();
        gigaSpace.snapshot(pojo3);
        pojo3.setId(1F);
        pojo3.setVal(123L);

        content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        result = spaceAPIController.post(Pojo3.class.getName(), new BufferedReader(new StringReader(content)));
        assertEquals("success", result.get("status"));

        SpaceDocument docresult2 = gigaSpace.readById(new IdQuery<SpaceDocument>(Pojo3.class.getName(), 1F,QueryResultType.DOCUMENT));
        comparePojoAndProps(pojo3, docresult2.getProperties());
    }


    @Test
    public void testEnum() throws ObjectNotFoundException, TypeNotFoundException{

        //write first doc
        SpaceDocument document = new SpaceDocument("Person")
            .setProperty("ID", "111")
            .setProperty("Job", Job.DOCTOR);
        gigaSpace.write(document);

        //write second doc
        SpaceDocument document2 = new SpaceDocument("Person")
            .setProperty("ID", "222")
            .setProperty("Job", Job.FARMER);
        gigaSpace.write(document2);

        BufferedReader reader = new BufferedReader(new StringReader("{\"ID\":\"333\", \"Job\":\"WORKER\"}"));
        Map<String, Object> postResult = spaceAPIController.post("Person", reader);
        assertEquals("success", postResult.get("status"));

        Map<String, Object> result = spaceAPIController.getByQuery("Person", "Job='DOCTOR'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        ArrayList<Map<String, Map<String, Object>>> resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        compareObjects(document.getProperties(), resultData.get(0).get("properties"));

        result = spaceAPIController.getByQuery("Person","Job='WORKER'", Integer.MAX_VALUE);
        assertEquals("success", result.get("status"));
        resultData = (ArrayList<Map<String, Map<String, Object>>>) result.get("data");
        Map<String, Object> expected = new HashMap<String, Object>();
        expected.put("ID", "333");
        expected.put("Job", Job.WORKER);
        compareObjects(expected, resultData.get(0).get("properties"));
    }
    
    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotRegisteredOnPut() throws Exception {
        String content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        spaceAPIController.post(UnregisteredPojo.class.getName(), new BufferedReader(new StringReader(content)));
    }

    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotRegisteredOnPost() throws Exception {
        String content = "[{\"id\":\"1\", \"val\":\"123\"}]";
        spaceAPIController.post(UnregisteredPojo.class.getName(), new  BufferedReader(new StringReader(content)));
    }
    
    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnGetByQuery() throws ObjectNotFoundException {
        spaceAPIController.getByQuery("IDontExist","id = 123", 1);
    }

    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnGetById() throws ObjectNotFoundException {
        spaceAPIController.getById("IDontExist", "123");
    }
    
    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnGetByType() throws ObjectNotFoundException {
        spaceAPIController.getByQuery("IDontExist", "", 1);
    }

    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnDeleteById() throws ObjectNotFoundException {
        spaceAPIController.deleteById("IDontExist", "123");
    }

    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnDeleteByQuery() throws ObjectNotFoundException {
        spaceAPIController.deleteByQuery("IDontExist", "id = 123", 1);
    }

    @Test(expected=TypeNotFoundException.class) 
    public void testTypeNotFoundOnDeleteByType() throws ObjectNotFoundException {
        spaceAPIController.deleteByQuery("IDontExist", "", 1);
    }
    
    private static void comparePojoAndProps(IPojo pojo, Map<String, Object> resultMap){
        try {
            //assertEquals(ControllerUtils.mapper.writeValueAsString(pojo), ControllerUtils.mapper.writeValueAsString(resultMap));
            assertEquals(ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(pojo), LinkedHashMap.class), ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(resultMap), LinkedHashMap.class));
        } catch (java.io.IOException e) {
            e.printStackTrace();
            Assert.fail("Error with comparePojoAndProps: "+ e.getMessage());
        }
        */
/*assertEquals(pojo.getId(), resultMap.get("id"));
        assertEquals(pojo.getVal(), resultMap.get("val"));*//*

    }
    
    private static void registerProductType(GigaSpace gigaspace) {
        // Create type descriptor:
        SpaceTypeDescriptor typeDescriptor = new SpaceTypeDescriptorBuilder("Product")
        .idProperty("CatalogNumber")
        .routingProperty("Category")
        .create();
        // Register type:
        gigaspace.getTypeManager().registerTypeDescriptor(typeDescriptor);
        
        // Create type descriptor:
        typeDescriptor = new SpaceTypeDescriptorBuilder("Person")
        .idProperty("ID")
        .addFixedProperty("Job", Job.class)
        .create();
        // Register type:
        gigaspace.getTypeManager().registerTypeDescriptor(typeDescriptor);
    }

    private void compareObjects(Object m1, Object m2){
        try {
            assertEquals(ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(m1), LinkedHashMap.class), ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(m2), LinkedHashMap.class));
            //assertEquals(ControllerUtils.mapper.writeValueAsString(m1), ControllerUtils.mapper.writeValueAsString(m2));
        } catch (java.io.IOException e) {
            e.printStackTrace();
            Assert.fail("Error with compareObjects: "+e.getMessage());
        }
    }

    public static void main(String[] args)throws Exception{
    	
    	Admin admin=new AdminFactory().addLocator("192.168.137.1").discoverUnmanagedSpaces().useDaemonThreads(true).create();
    	Spaces spaces=admin.getSpaces();
    	spaces.waitFor("embeddedTestSpace");
    	
    }

}
*/
